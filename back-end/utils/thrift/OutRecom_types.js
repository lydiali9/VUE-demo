//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var RecommendItem = module.exports.RecommendItem = function(args) {
  this.contentId = null;
  this.score = null;
  this.strategy = null;
  if (args) {
    if (args.contentId !== undefined && args.contentId !== null) {
      this.contentId = args.contentId;
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.strategy !== undefined && args.strategy !== null) {
      this.strategy = args.strategy;
    }
  }
};
RecommendItem.prototype = {};
RecommendItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.strategy = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecommendItem.prototype.write = function(output) {
  output.writeStructBegin('RecommendItem');
  if (this.contentId !== null && this.contentId !== undefined) {
    output.writeFieldBegin('contentId', Thrift.Type.STRING, 1);
    output.writeString(this.contentId);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  if (this.strategy !== null && this.strategy !== undefined) {
    output.writeFieldBegin('strategy', Thrift.Type.I32, 3);
    output.writeI32(this.strategy);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

